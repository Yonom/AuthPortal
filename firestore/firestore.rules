rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  	function verifyTimestamp(createdAt) {
    	return createdAt == request.time;
    }
    
    function verifyFields(required, optional) {
      let allAllowedFields = required.concat(optional);
      return request.resource.data.keys().hasAll(required) &&
        request.resource.data.keys().hasOnly(allAllowedFields);
    }

    function hasAccessToProject(project_id) {
      return request.auth != null && 
        request.auth.uid in get(/databases/$(database)/documents/projects/$(project_id)).data.admin_config.members;
    }
  
    match /projects/{project_id} {
      function hasAccessToProjectLocal() {
        return request.auth != null &&
          (
            (request.method != 'create' && request.method != 'update') || 
            // on create, update - verify new members list
            request.auth.uid in request.resource.data.admin_config.members
          ) &&
          (
            request.method == 'create' ||
            // on read, update, delete - verify existing members list
            request.auth.uid in resource.data.admin_config.members
          );
      }
      
      function validateProjectObject() {
      	return verifyFields(["admin_config", "portal_config", "clients", "created_at", "updated_at"], []) &&
        	verifyTimestamp(request.resource.data.updated_at);
      }
      
      allow create:
        if hasAccessToProjectLocal() &&
          validateProjectObject() &&
          verifyTimestamp(request.resource.data.created_at);
      
      allow update:
        if hasAccessToProjectLocal() &&
          validateProjectObject() &&
          request.resource.data.created_at == resource.data.created_at;
        	
    	
      allow read, delete:
        if hasAccessToProjectLocal();

      match /metadata/doctor_report {
        allow read:
          if hasAccessToProject(project_id);
      }
    }
    
    match /domains/{domain} {
      function isDomain() {
        // valid (sub)domain with a max depth of 6
        let genericDomainValidation = domain.matches("^(?:[a-z0-9](?:[a-z0-9-]{0,60}[a-z0-9])?\\.){1,5}(?:[a-z][a-z0-9-]{0,60}[a-z0-9])$");

        // stricter rules for *.authportal.site (no subdomains, no numbers at start, no repeated dashes, min 6 chars, max 30 chars)
        let authportalSiteValidation = !domain.matches(".authportal.site$") || (
          domain.matches("^[a-z][a-z0-9-]{4,28}[a-z0-9].authportal.site$") &&
          domain.matches("^(?:[a-z0-9]-?)+.authportal.site$") 
        );

        let reservedDomainValidation = !domain.matches(".authportal.dev$") && domain != "authportal.dev";

        return genericDomainValidation && authportalSiteValidation && reservedDomainValidation;
      }
      
      function validateDomainObject() {
      	return verifyFields(["project_id", "created_at", "updated_at"], ["helper_domain", "shipped_at"]) &&
        	verifyTimestamp(request.resource.data.updated_at);
      }
      
      allow create:
        if isDomain() &&
          hasAccessToProject(request.resource.data.project_id) &&
          validateDomainObject() &&
          verifyTimestamp(request.resource.data.created_at);
      
      allow update:
        if
          // hack to allow checking for domain availability
          resource == null || 
          (
            hasAccessToProject(resource.data.project_id) &&
            validateDomainObject() &&
            request.resource.data.created_at == resource.data.created_at
          );

      allow delete, read: 
        if hasAccessToProject(resource.data.project_id);
    }
  }
}